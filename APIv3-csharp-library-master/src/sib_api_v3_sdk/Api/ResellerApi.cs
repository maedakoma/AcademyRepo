/* 
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using sib_api_v3_sdk.Client;
using sib_api_v3_sdk.Model;

namespace sib_api_v3_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResellerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Email and/or SMS credits to a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addCredits">Values to post to add credit to a specific child account</param>
        /// <returns>RemainingCreditModel</returns>
        RemainingCreditModel AddCredits (string childAuthKey, AddCredits addCredits);

        /// <summary>
        /// Add Email and/or SMS credits to a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addCredits">Values to post to add credit to a specific child account</param>
        /// <returns>ApiResponse of RemainingCreditModel</returns>
        ApiResponse<RemainingCreditModel> AddCreditsWithHttpInfo (string childAuthKey, AddCredits addCredits);
        /// <summary>
        /// Associate a dedicated IP to the child
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to associate</param>
        /// <returns></returns>
        void AssociateIpToChild (string childAuthKey, ManageIp ip);

        /// <summary>
        /// Associate a dedicated IP to the child
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to associate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AssociateIpToChildWithHttpInfo (string childAuthKey, ManageIp ip);
        /// <summary>
        /// Creates a domain for a child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addChildDomain">Sender domain to add for a specific child account. This will not be displayed to the parent account.</param>
        /// <returns></returns>
        void CreateChildDomain (string childAuthKey, AddChildDomain addChildDomain);

        /// <summary>
        /// Creates a domain for a child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addChildDomain">Sender domain to add for a specific child account. This will not be displayed to the parent account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateChildDomainWithHttpInfo (string childAuthKey, AddChildDomain addChildDomain);
        /// <summary>
        /// Creates a reseller child
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resellerChild">reseller child to add (optional)</param>
        /// <returns>CreateReseller</returns>
        CreateReseller CreateResellerChild (CreateChild resellerChild = null);

        /// <summary>
        /// Creates a reseller child
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resellerChild">reseller child to add (optional)</param>
        /// <returns>ApiResponse of CreateReseller</returns>
        ApiResponse<CreateReseller> CreateResellerChildWithHttpInfo (CreateChild resellerChild = null);
        /// <summary>
        /// Deletes the sender domain of the reseller child based on the childAuthKey and domainName passed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be deleted</param>
        /// <returns></returns>
        void DeleteChildDomain (string childAuthKey, string domainName);

        /// <summary>
        /// Deletes the sender domain of the reseller child based on the childAuthKey and domainName passed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteChildDomainWithHttpInfo (string childAuthKey, string domainName);
        /// <summary>
        /// Deletes a single reseller child based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns></returns>
        void DeleteResellerChild (string childAuthKey);

        /// <summary>
        /// Deletes a single reseller child based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteResellerChildWithHttpInfo (string childAuthKey);
        /// <summary>
        /// Dissociate a dedicated IP to the child
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to dissociate</param>
        /// <returns></returns>
        void DissociateIpFromChild (string childAuthKey, ManageIp ip);

        /// <summary>
        /// Dissociate a dedicated IP to the child
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to dissociate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DissociateIpFromChildWithHttpInfo (string childAuthKey, ManageIp ip);
        /// <summary>
        /// Returns the status of reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>GetChildAccountCreationStatus</returns>
        GetChildAccountCreationStatus GetChildAccountCreationStatus (string childAuthKey);

        /// <summary>
        /// Returns the status of reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>ApiResponse of GetChildAccountCreationStatus</returns>
        ApiResponse<GetChildAccountCreationStatus> GetChildAccountCreationStatusWithHttpInfo (string childAuthKey);
        /// <summary>
        /// Gets all the sender domains of a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>GetChildDomains</returns>
        GetChildDomains GetChildDomains (string childAuthKey);

        /// <summary>
        /// Gets all the sender domains of a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>ApiResponse of GetChildDomains</returns>
        ApiResponse<GetChildDomains> GetChildDomainsWithHttpInfo (string childAuthKey);
        /// <summary>
        /// Gets the info about a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>GetChildInfo</returns>
        GetChildInfo GetChildInfo (string childAuthKey);

        /// <summary>
        /// Gets the info about a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>ApiResponse of GetChildInfo</returns>
        ApiResponse<GetChildInfo> GetChildInfoWithHttpInfo (string childAuthKey);
        /// <summary>
        /// Gets the list of all reseller&#39;s children accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents for child accounts information per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <returns>GetChildrenList</returns>
        GetChildrenList GetResellerChilds (long? limit = null, long? offset = null);

        /// <summary>
        /// Gets the list of all reseller&#39;s children accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents for child accounts information per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <returns>ApiResponse of GetChildrenList</returns>
        ApiResponse<GetChildrenList> GetResellerChildsWithHttpInfo (long? limit = null, long? offset = null);
        /// <summary>
        /// Get session token to access Sendinblue (SSO)
        /// </summary>
        /// <remarks>
        /// It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>GetSsoToken</returns>
        GetSsoToken GetSsoToken (string childAuthKey);

        /// <summary>
        /// Get session token to access Sendinblue (SSO)
        /// </summary>
        /// <remarks>
        /// It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>ApiResponse of GetSsoToken</returns>
        ApiResponse<GetSsoToken> GetSsoTokenWithHttpInfo (string childAuthKey);
        /// <summary>
        /// Remove Email and/or SMS credits from a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="removeCredits">Values to post to remove email or SMS credits from a specific child account</param>
        /// <returns>RemainingCreditModel</returns>
        RemainingCreditModel RemoveCredits (string childAuthKey, RemoveCredits removeCredits);

        /// <summary>
        /// Remove Email and/or SMS credits from a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="removeCredits">Values to post to remove email or SMS credits from a specific child account</param>
        /// <returns>ApiResponse of RemainingCreditModel</returns>
        ApiResponse<RemainingCreditModel> RemoveCreditsWithHttpInfo (string childAuthKey, RemoveCredits removeCredits);
        /// <summary>
        /// Updates infos of reseller&#39;s child account status based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="updateChildAccountStatus">values to update in child account status</param>
        /// <returns></returns>
        void UpdateChildAccountStatus (string childAuthKey, UpdateChildAccountStatus updateChildAccountStatus);

        /// <summary>
        /// Updates infos of reseller&#39;s child account status based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="updateChildAccountStatus">values to update in child account status</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateChildAccountStatusWithHttpInfo (string childAuthKey, UpdateChildAccountStatus updateChildAccountStatus);
        /// <summary>
        /// Updates the sender domain of reseller&#39;s child based on the childAuthKey and domainName passed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be updated</param>
        /// <param name="updateChildDomain">value to update for sender domain</param>
        /// <returns></returns>
        void UpdateChildDomain (string childAuthKey, string domainName, UpdateChildDomain updateChildDomain);

        /// <summary>
        /// Updates the sender domain of reseller&#39;s child based on the childAuthKey and domainName passed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be updated</param>
        /// <param name="updateChildDomain">value to update for sender domain</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateChildDomainWithHttpInfo (string childAuthKey, string domainName, UpdateChildDomain updateChildDomain);
        /// <summary>
        /// Updates infos of reseller&#39;s child based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="resellerChild">values to update in child profile</param>
        /// <returns></returns>
        void UpdateResellerChild (string childAuthKey, UpdateChild resellerChild);

        /// <summary>
        /// Updates infos of reseller&#39;s child based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="resellerChild">values to update in child profile</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateResellerChildWithHttpInfo (string childAuthKey, UpdateChild resellerChild);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add Email and/or SMS credits to a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addCredits">Values to post to add credit to a specific child account</param>
        /// <returns>Task of RemainingCreditModel</returns>
        System.Threading.Tasks.Task<RemainingCreditModel> AddCreditsAsync (string childAuthKey, AddCredits addCredits);

        /// <summary>
        /// Add Email and/or SMS credits to a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addCredits">Values to post to add credit to a specific child account</param>
        /// <returns>Task of ApiResponse (RemainingCreditModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemainingCreditModel>> AddCreditsAsyncWithHttpInfo (string childAuthKey, AddCredits addCredits);
        /// <summary>
        /// Associate a dedicated IP to the child
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to associate</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AssociateIpToChildAsync (string childAuthKey, ManageIp ip);

        /// <summary>
        /// Associate a dedicated IP to the child
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to associate</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateIpToChildAsyncWithHttpInfo (string childAuthKey, ManageIp ip);
        /// <summary>
        /// Creates a domain for a child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addChildDomain">Sender domain to add for a specific child account. This will not be displayed to the parent account.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateChildDomainAsync (string childAuthKey, AddChildDomain addChildDomain);

        /// <summary>
        /// Creates a domain for a child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addChildDomain">Sender domain to add for a specific child account. This will not be displayed to the parent account.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateChildDomainAsyncWithHttpInfo (string childAuthKey, AddChildDomain addChildDomain);
        /// <summary>
        /// Creates a reseller child
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resellerChild">reseller child to add (optional)</param>
        /// <returns>Task of CreateReseller</returns>
        System.Threading.Tasks.Task<CreateReseller> CreateResellerChildAsync (CreateChild resellerChild = null);

        /// <summary>
        /// Creates a reseller child
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resellerChild">reseller child to add (optional)</param>
        /// <returns>Task of ApiResponse (CreateReseller)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateReseller>> CreateResellerChildAsyncWithHttpInfo (CreateChild resellerChild = null);
        /// <summary>
        /// Deletes the sender domain of the reseller child based on the childAuthKey and domainName passed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be deleted</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteChildDomainAsync (string childAuthKey, string domainName);

        /// <summary>
        /// Deletes the sender domain of the reseller child based on the childAuthKey and domainName passed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChildDomainAsyncWithHttpInfo (string childAuthKey, string domainName);
        /// <summary>
        /// Deletes a single reseller child based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteResellerChildAsync (string childAuthKey);

        /// <summary>
        /// Deletes a single reseller child based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResellerChildAsyncWithHttpInfo (string childAuthKey);
        /// <summary>
        /// Dissociate a dedicated IP to the child
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to dissociate</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DissociateIpFromChildAsync (string childAuthKey, ManageIp ip);

        /// <summary>
        /// Dissociate a dedicated IP to the child
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to dissociate</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DissociateIpFromChildAsyncWithHttpInfo (string childAuthKey, ManageIp ip);
        /// <summary>
        /// Returns the status of reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of GetChildAccountCreationStatus</returns>
        System.Threading.Tasks.Task<GetChildAccountCreationStatus> GetChildAccountCreationStatusAsync (string childAuthKey);

        /// <summary>
        /// Returns the status of reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of ApiResponse (GetChildAccountCreationStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetChildAccountCreationStatus>> GetChildAccountCreationStatusAsyncWithHttpInfo (string childAuthKey);
        /// <summary>
        /// Gets all the sender domains of a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of GetChildDomains</returns>
        System.Threading.Tasks.Task<GetChildDomains> GetChildDomainsAsync (string childAuthKey);

        /// <summary>
        /// Gets all the sender domains of a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of ApiResponse (GetChildDomains)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetChildDomains>> GetChildDomainsAsyncWithHttpInfo (string childAuthKey);
        /// <summary>
        /// Gets the info about a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of GetChildInfo</returns>
        System.Threading.Tasks.Task<GetChildInfo> GetChildInfoAsync (string childAuthKey);

        /// <summary>
        /// Gets the info about a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of ApiResponse (GetChildInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetChildInfo>> GetChildInfoAsyncWithHttpInfo (string childAuthKey);
        /// <summary>
        /// Gets the list of all reseller&#39;s children accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents for child accounts information per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <returns>Task of GetChildrenList</returns>
        System.Threading.Tasks.Task<GetChildrenList> GetResellerChildsAsync (long? limit = null, long? offset = null);

        /// <summary>
        /// Gets the list of all reseller&#39;s children accounts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents for child accounts information per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetChildrenList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetChildrenList>> GetResellerChildsAsyncWithHttpInfo (long? limit = null, long? offset = null);
        /// <summary>
        /// Get session token to access Sendinblue (SSO)
        /// </summary>
        /// <remarks>
        /// It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of GetSsoToken</returns>
        System.Threading.Tasks.Task<GetSsoToken> GetSsoTokenAsync (string childAuthKey);

        /// <summary>
        /// Get session token to access Sendinblue (SSO)
        /// </summary>
        /// <remarks>
        /// It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of ApiResponse (GetSsoToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSsoToken>> GetSsoTokenAsyncWithHttpInfo (string childAuthKey);
        /// <summary>
        /// Remove Email and/or SMS credits from a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="removeCredits">Values to post to remove email or SMS credits from a specific child account</param>
        /// <returns>Task of RemainingCreditModel</returns>
        System.Threading.Tasks.Task<RemainingCreditModel> RemoveCreditsAsync (string childAuthKey, RemoveCredits removeCredits);

        /// <summary>
        /// Remove Email and/or SMS credits from a specific child account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="removeCredits">Values to post to remove email or SMS credits from a specific child account</param>
        /// <returns>Task of ApiResponse (RemainingCreditModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemainingCreditModel>> RemoveCreditsAsyncWithHttpInfo (string childAuthKey, RemoveCredits removeCredits);
        /// <summary>
        /// Updates infos of reseller&#39;s child account status based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="updateChildAccountStatus">values to update in child account status</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateChildAccountStatusAsync (string childAuthKey, UpdateChildAccountStatus updateChildAccountStatus);

        /// <summary>
        /// Updates infos of reseller&#39;s child account status based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="updateChildAccountStatus">values to update in child account status</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateChildAccountStatusAsyncWithHttpInfo (string childAuthKey, UpdateChildAccountStatus updateChildAccountStatus);
        /// <summary>
        /// Updates the sender domain of reseller&#39;s child based on the childAuthKey and domainName passed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be updated</param>
        /// <param name="updateChildDomain">value to update for sender domain</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateChildDomainAsync (string childAuthKey, string domainName, UpdateChildDomain updateChildDomain);

        /// <summary>
        /// Updates the sender domain of reseller&#39;s child based on the childAuthKey and domainName passed
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be updated</param>
        /// <param name="updateChildDomain">value to update for sender domain</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateChildDomainAsyncWithHttpInfo (string childAuthKey, string domainName, UpdateChildDomain updateChildDomain);
        /// <summary>
        /// Updates infos of reseller&#39;s child based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="resellerChild">values to update in child profile</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateResellerChildAsync (string childAuthKey, UpdateChild resellerChild);

        /// <summary>
        /// Updates infos of reseller&#39;s child based on the childAuthKey supplied
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="resellerChild">values to update in child profile</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateResellerChildAsyncWithHttpInfo (string childAuthKey, UpdateChild resellerChild);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ResellerApi : IResellerApi
    {
        private sib_api_v3_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ResellerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResellerApi(String basePath)
        {
            this.Configuration = new sib_api_v3_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sib_api_v3_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResellerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ResellerApi(sib_api_v3_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sib_api_v3_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sib_api_v3_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sib_api_v3_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sib_api_v3_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add Email and/or SMS credits to a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addCredits">Values to post to add credit to a specific child account</param>
        /// <returns>RemainingCreditModel</returns>
        public RemainingCreditModel AddCredits (string childAuthKey, AddCredits addCredits)
        {
             ApiResponse<RemainingCreditModel> localVarResponse = AddCreditsWithHttpInfo(childAuthKey, addCredits);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Email and/or SMS credits to a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addCredits">Values to post to add credit to a specific child account</param>
        /// <returns>ApiResponse of RemainingCreditModel</returns>
        public ApiResponse< RemainingCreditModel > AddCreditsWithHttpInfo (string childAuthKey, AddCredits addCredits)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->AddCredits");
            // verify the required parameter 'addCredits' is set
            if (addCredits == null)
                throw new ApiException(400, "Missing required parameter 'addCredits' when calling ResellerApi->AddCredits");

            var localVarPath = "./reseller/children/{childAuthKey}/credits/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (addCredits != null && addCredits.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addCredits); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addCredits; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCredits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemainingCreditModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RemainingCreditModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemainingCreditModel)));
        }

        /// <summary>
        /// Add Email and/or SMS credits to a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addCredits">Values to post to add credit to a specific child account</param>
        /// <returns>Task of RemainingCreditModel</returns>
        public async System.Threading.Tasks.Task<RemainingCreditModel> AddCreditsAsync (string childAuthKey, AddCredits addCredits)
        {
             ApiResponse<RemainingCreditModel> localVarResponse = await AddCreditsAsyncWithHttpInfo(childAuthKey, addCredits);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Email and/or SMS credits to a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addCredits">Values to post to add credit to a specific child account</param>
        /// <returns>Task of ApiResponse (RemainingCreditModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemainingCreditModel>> AddCreditsAsyncWithHttpInfo (string childAuthKey, AddCredits addCredits)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->AddCredits");
            // verify the required parameter 'addCredits' is set
            if (addCredits == null)
                throw new ApiException(400, "Missing required parameter 'addCredits' when calling ResellerApi->AddCredits");

            var localVarPath = "./reseller/children/{childAuthKey}/credits/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (addCredits != null && addCredits.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addCredits); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addCredits; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCredits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemainingCreditModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RemainingCreditModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemainingCreditModel)));
        }

        /// <summary>
        /// Associate a dedicated IP to the child 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to associate</param>
        /// <returns></returns>
        public void AssociateIpToChild (string childAuthKey, ManageIp ip)
        {
             AssociateIpToChildWithHttpInfo(childAuthKey, ip);
        }

        /// <summary>
        /// Associate a dedicated IP to the child 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to associate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AssociateIpToChildWithHttpInfo (string childAuthKey, ManageIp ip)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->AssociateIpToChild");
            // verify the required parameter 'ip' is set
            if (ip == null)
                throw new ApiException(400, "Missing required parameter 'ip' when calling ResellerApi->AssociateIpToChild");

            var localVarPath = "./reseller/children/{childAuthKey}/ips/associate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (ip != null && ip.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ip); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ip; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateIpToChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Associate a dedicated IP to the child 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to associate</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AssociateIpToChildAsync (string childAuthKey, ManageIp ip)
        {
             await AssociateIpToChildAsyncWithHttpInfo(childAuthKey, ip);

        }

        /// <summary>
        /// Associate a dedicated IP to the child 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to associate</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AssociateIpToChildAsyncWithHttpInfo (string childAuthKey, ManageIp ip)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->AssociateIpToChild");
            // verify the required parameter 'ip' is set
            if (ip == null)
                throw new ApiException(400, "Missing required parameter 'ip' when calling ResellerApi->AssociateIpToChild");

            var localVarPath = "./reseller/children/{childAuthKey}/ips/associate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (ip != null && ip.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ip); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ip; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AssociateIpToChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a domain for a child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addChildDomain">Sender domain to add for a specific child account. This will not be displayed to the parent account.</param>
        /// <returns></returns>
        public void CreateChildDomain (string childAuthKey, AddChildDomain addChildDomain)
        {
             CreateChildDomainWithHttpInfo(childAuthKey, addChildDomain);
        }

        /// <summary>
        /// Creates a domain for a child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addChildDomain">Sender domain to add for a specific child account. This will not be displayed to the parent account.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateChildDomainWithHttpInfo (string childAuthKey, AddChildDomain addChildDomain)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->CreateChildDomain");
            // verify the required parameter 'addChildDomain' is set
            if (addChildDomain == null)
                throw new ApiException(400, "Missing required parameter 'addChildDomain' when calling ResellerApi->CreateChildDomain");

            var localVarPath = "./reseller/children/{childAuthKey}/domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (addChildDomain != null && addChildDomain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addChildDomain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addChildDomain; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateChildDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a domain for a child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addChildDomain">Sender domain to add for a specific child account. This will not be displayed to the parent account.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateChildDomainAsync (string childAuthKey, AddChildDomain addChildDomain)
        {
             await CreateChildDomainAsyncWithHttpInfo(childAuthKey, addChildDomain);

        }

        /// <summary>
        /// Creates a domain for a child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="addChildDomain">Sender domain to add for a specific child account. This will not be displayed to the parent account.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateChildDomainAsyncWithHttpInfo (string childAuthKey, AddChildDomain addChildDomain)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->CreateChildDomain");
            // verify the required parameter 'addChildDomain' is set
            if (addChildDomain == null)
                throw new ApiException(400, "Missing required parameter 'addChildDomain' when calling ResellerApi->CreateChildDomain");

            var localVarPath = "./reseller/children/{childAuthKey}/domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (addChildDomain != null && addChildDomain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(addChildDomain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = addChildDomain; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateChildDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Creates a reseller child 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resellerChild">reseller child to add (optional)</param>
        /// <returns>CreateReseller</returns>
        public CreateReseller CreateResellerChild (CreateChild resellerChild = null)
        {
             ApiResponse<CreateReseller> localVarResponse = CreateResellerChildWithHttpInfo(resellerChild);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a reseller child 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resellerChild">reseller child to add (optional)</param>
        /// <returns>ApiResponse of CreateReseller</returns>
        public ApiResponse< CreateReseller > CreateResellerChildWithHttpInfo (CreateChild resellerChild = null)
        {

            var localVarPath = "./reseller/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resellerChild != null && resellerChild.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resellerChild); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resellerChild; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResellerChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateReseller>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateReseller) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateReseller)));
        }

        /// <summary>
        /// Creates a reseller child 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resellerChild">reseller child to add (optional)</param>
        /// <returns>Task of CreateReseller</returns>
        public async System.Threading.Tasks.Task<CreateReseller> CreateResellerChildAsync (CreateChild resellerChild = null)
        {
             ApiResponse<CreateReseller> localVarResponse = await CreateResellerChildAsyncWithHttpInfo(resellerChild);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a reseller child 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resellerChild">reseller child to add (optional)</param>
        /// <returns>Task of ApiResponse (CreateReseller)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateReseller>> CreateResellerChildAsyncWithHttpInfo (CreateChild resellerChild = null)
        {

            var localVarPath = "./reseller/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resellerChild != null && resellerChild.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resellerChild); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resellerChild; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResellerChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateReseller>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateReseller) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateReseller)));
        }

        /// <summary>
        /// Deletes the sender domain of the reseller child based on the childAuthKey and domainName passed 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be deleted</param>
        /// <returns></returns>
        public void DeleteChildDomain (string childAuthKey, string domainName)
        {
             DeleteChildDomainWithHttpInfo(childAuthKey, domainName);
        }

        /// <summary>
        /// Deletes the sender domain of the reseller child based on the childAuthKey and domainName passed 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteChildDomainWithHttpInfo (string childAuthKey, string domainName)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->DeleteChildDomain");
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400, "Missing required parameter 'domainName' when calling ResellerApi->DeleteChildDomain");

            var localVarPath = "./reseller/children/{childAuthKey}/domains/{domainName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (domainName != null) localVarPathParams.Add("domainName", this.Configuration.ApiClient.ParameterToString(domainName)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChildDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the sender domain of the reseller child based on the childAuthKey and domainName passed 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be deleted</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteChildDomainAsync (string childAuthKey, string domainName)
        {
             await DeleteChildDomainAsyncWithHttpInfo(childAuthKey, domainName);

        }

        /// <summary>
        /// Deletes the sender domain of the reseller child based on the childAuthKey and domainName passed 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be deleted</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteChildDomainAsyncWithHttpInfo (string childAuthKey, string domainName)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->DeleteChildDomain");
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400, "Missing required parameter 'domainName' when calling ResellerApi->DeleteChildDomain");

            var localVarPath = "./reseller/children/{childAuthKey}/domains/{domainName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (domainName != null) localVarPathParams.Add("domainName", this.Configuration.ApiClient.ParameterToString(domainName)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteChildDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a single reseller child based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns></returns>
        public void DeleteResellerChild (string childAuthKey)
        {
             DeleteResellerChildWithHttpInfo(childAuthKey);
        }

        /// <summary>
        /// Deletes a single reseller child based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteResellerChildWithHttpInfo (string childAuthKey)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->DeleteResellerChild");

            var localVarPath = "./reseller/children/{childAuthKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResellerChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a single reseller child based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteResellerChildAsync (string childAuthKey)
        {
             await DeleteResellerChildAsyncWithHttpInfo(childAuthKey);

        }

        /// <summary>
        /// Deletes a single reseller child based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResellerChildAsyncWithHttpInfo (string childAuthKey)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->DeleteResellerChild");

            var localVarPath = "./reseller/children/{childAuthKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteResellerChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Dissociate a dedicated IP to the child 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to dissociate</param>
        /// <returns></returns>
        public void DissociateIpFromChild (string childAuthKey, ManageIp ip)
        {
             DissociateIpFromChildWithHttpInfo(childAuthKey, ip);
        }

        /// <summary>
        /// Dissociate a dedicated IP to the child 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to dissociate</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DissociateIpFromChildWithHttpInfo (string childAuthKey, ManageIp ip)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->DissociateIpFromChild");
            // verify the required parameter 'ip' is set
            if (ip == null)
                throw new ApiException(400, "Missing required parameter 'ip' when calling ResellerApi->DissociateIpFromChild");

            var localVarPath = "./reseller/children/{childAuthKey}/ips/dissociate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (ip != null && ip.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ip); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ip; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DissociateIpFromChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Dissociate a dedicated IP to the child 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to dissociate</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DissociateIpFromChildAsync (string childAuthKey, ManageIp ip)
        {
             await DissociateIpFromChildAsyncWithHttpInfo(childAuthKey, ip);

        }

        /// <summary>
        /// Dissociate a dedicated IP to the child 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="ip">IP to dissociate</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DissociateIpFromChildAsyncWithHttpInfo (string childAuthKey, ManageIp ip)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->DissociateIpFromChild");
            // verify the required parameter 'ip' is set
            if (ip == null)
                throw new ApiException(400, "Missing required parameter 'ip' when calling ResellerApi->DissociateIpFromChild");

            var localVarPath = "./reseller/children/{childAuthKey}/ips/dissociate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (ip != null && ip.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ip); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ip; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DissociateIpFromChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns the status of reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>GetChildAccountCreationStatus</returns>
        public GetChildAccountCreationStatus GetChildAccountCreationStatus (string childAuthKey)
        {
             ApiResponse<GetChildAccountCreationStatus> localVarResponse = GetChildAccountCreationStatusWithHttpInfo(childAuthKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the status of reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>ApiResponse of GetChildAccountCreationStatus</returns>
        public ApiResponse< GetChildAccountCreationStatus > GetChildAccountCreationStatusWithHttpInfo (string childAuthKey)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->GetChildAccountCreationStatus");

            var localVarPath = "./reseller/children/{childAuthKey}/accountCreationStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildAccountCreationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChildAccountCreationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetChildAccountCreationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChildAccountCreationStatus)));
        }

        /// <summary>
        /// Returns the status of reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of GetChildAccountCreationStatus</returns>
        public async System.Threading.Tasks.Task<GetChildAccountCreationStatus> GetChildAccountCreationStatusAsync (string childAuthKey)
        {
             ApiResponse<GetChildAccountCreationStatus> localVarResponse = await GetChildAccountCreationStatusAsyncWithHttpInfo(childAuthKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the status of reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of ApiResponse (GetChildAccountCreationStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetChildAccountCreationStatus>> GetChildAccountCreationStatusAsyncWithHttpInfo (string childAuthKey)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->GetChildAccountCreationStatus");

            var localVarPath = "./reseller/children/{childAuthKey}/accountCreationStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildAccountCreationStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChildAccountCreationStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetChildAccountCreationStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChildAccountCreationStatus)));
        }

        /// <summary>
        /// Gets all the sender domains of a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>GetChildDomains</returns>
        public GetChildDomains GetChildDomains (string childAuthKey)
        {
             ApiResponse<GetChildDomains> localVarResponse = GetChildDomainsWithHttpInfo(childAuthKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all the sender domains of a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>ApiResponse of GetChildDomains</returns>
        public ApiResponse< GetChildDomains > GetChildDomainsWithHttpInfo (string childAuthKey)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->GetChildDomains");

            var localVarPath = "./reseller/children/{childAuthKey}/domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildDomains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChildDomains>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetChildDomains) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChildDomains)));
        }

        /// <summary>
        /// Gets all the sender domains of a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of GetChildDomains</returns>
        public async System.Threading.Tasks.Task<GetChildDomains> GetChildDomainsAsync (string childAuthKey)
        {
             ApiResponse<GetChildDomains> localVarResponse = await GetChildDomainsAsyncWithHttpInfo(childAuthKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all the sender domains of a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of ApiResponse (GetChildDomains)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetChildDomains>> GetChildDomainsAsyncWithHttpInfo (string childAuthKey)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->GetChildDomains");

            var localVarPath = "./reseller/children/{childAuthKey}/domains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildDomains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChildDomains>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetChildDomains) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChildDomains)));
        }

        /// <summary>
        /// Gets the info about a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>GetChildInfo</returns>
        public GetChildInfo GetChildInfo (string childAuthKey)
        {
             ApiResponse<GetChildInfo> localVarResponse = GetChildInfoWithHttpInfo(childAuthKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the info about a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>ApiResponse of GetChildInfo</returns>
        public ApiResponse< GetChildInfo > GetChildInfoWithHttpInfo (string childAuthKey)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->GetChildInfo");

            var localVarPath = "./reseller/children/{childAuthKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChildInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetChildInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChildInfo)));
        }

        /// <summary>
        /// Gets the info about a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of GetChildInfo</returns>
        public async System.Threading.Tasks.Task<GetChildInfo> GetChildInfoAsync (string childAuthKey)
        {
             ApiResponse<GetChildInfo> localVarResponse = await GetChildInfoAsyncWithHttpInfo(childAuthKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the info about a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of ApiResponse (GetChildInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetChildInfo>> GetChildInfoAsyncWithHttpInfo (string childAuthKey)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->GetChildInfo");

            var localVarPath = "./reseller/children/{childAuthKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChildInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChildInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetChildInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChildInfo)));
        }

        /// <summary>
        /// Gets the list of all reseller&#39;s children accounts 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents for child accounts information per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <returns>GetChildrenList</returns>
        public GetChildrenList GetResellerChilds (long? limit = null, long? offset = null)
        {
             ApiResponse<GetChildrenList> localVarResponse = GetResellerChildsWithHttpInfo(limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the list of all reseller&#39;s children accounts 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents for child accounts information per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <returns>ApiResponse of GetChildrenList</returns>
        public ApiResponse< GetChildrenList > GetResellerChildsWithHttpInfo (long? limit = null, long? offset = null)
        {

            var localVarPath = "./reseller/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResellerChilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChildrenList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetChildrenList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChildrenList)));
        }

        /// <summary>
        /// Gets the list of all reseller&#39;s children accounts 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents for child accounts information per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <returns>Task of GetChildrenList</returns>
        public async System.Threading.Tasks.Task<GetChildrenList> GetResellerChildsAsync (long? limit = null, long? offset = null)
        {
             ApiResponse<GetChildrenList> localVarResponse = await GetResellerChildsAsyncWithHttpInfo(limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the list of all reseller&#39;s children accounts 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents for child accounts information per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document in the page (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetChildrenList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetChildrenList>> GetResellerChildsAsyncWithHttpInfo (long? limit = null, long? offset = null)
        {

            var localVarPath = "./reseller/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResellerChilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetChildrenList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetChildrenList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetChildrenList)));
        }

        /// <summary>
        /// Get session token to access Sendinblue (SSO) It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>GetSsoToken</returns>
        public GetSsoToken GetSsoToken (string childAuthKey)
        {
             ApiResponse<GetSsoToken> localVarResponse = GetSsoTokenWithHttpInfo(childAuthKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get session token to access Sendinblue (SSO) It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>ApiResponse of GetSsoToken</returns>
        public ApiResponse< GetSsoToken > GetSsoTokenWithHttpInfo (string childAuthKey)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->GetSsoToken");

            var localVarPath = "./reseller/children/{childAuthKey}/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSsoToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSsoToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSsoToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSsoToken)));
        }

        /// <summary>
        /// Get session token to access Sendinblue (SSO) It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of GetSsoToken</returns>
        public async System.Threading.Tasks.Task<GetSsoToken> GetSsoTokenAsync (string childAuthKey)
        {
             ApiResponse<GetSsoToken> localVarResponse = await GetSsoTokenAsyncWithHttpInfo(childAuthKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get session token to access Sendinblue (SSO) It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <returns>Task of ApiResponse (GetSsoToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSsoToken>> GetSsoTokenAsyncWithHttpInfo (string childAuthKey)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->GetSsoToken");

            var localVarPath = "./reseller/children/{childAuthKey}/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSsoToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSsoToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetSsoToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSsoToken)));
        }

        /// <summary>
        /// Remove Email and/or SMS credits from a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="removeCredits">Values to post to remove email or SMS credits from a specific child account</param>
        /// <returns>RemainingCreditModel</returns>
        public RemainingCreditModel RemoveCredits (string childAuthKey, RemoveCredits removeCredits)
        {
             ApiResponse<RemainingCreditModel> localVarResponse = RemoveCreditsWithHttpInfo(childAuthKey, removeCredits);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Email and/or SMS credits from a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="removeCredits">Values to post to remove email or SMS credits from a specific child account</param>
        /// <returns>ApiResponse of RemainingCreditModel</returns>
        public ApiResponse< RemainingCreditModel > RemoveCreditsWithHttpInfo (string childAuthKey, RemoveCredits removeCredits)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->RemoveCredits");
            // verify the required parameter 'removeCredits' is set
            if (removeCredits == null)
                throw new ApiException(400, "Missing required parameter 'removeCredits' when calling ResellerApi->RemoveCredits");

            var localVarPath = "./reseller/children/{childAuthKey}/credits/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (removeCredits != null && removeCredits.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(removeCredits); // http body (model) parameter
            }
            else
            {
                localVarPostBody = removeCredits; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveCredits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemainingCreditModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RemainingCreditModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemainingCreditModel)));
        }

        /// <summary>
        /// Remove Email and/or SMS credits from a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="removeCredits">Values to post to remove email or SMS credits from a specific child account</param>
        /// <returns>Task of RemainingCreditModel</returns>
        public async System.Threading.Tasks.Task<RemainingCreditModel> RemoveCreditsAsync (string childAuthKey, RemoveCredits removeCredits)
        {
             ApiResponse<RemainingCreditModel> localVarResponse = await RemoveCreditsAsyncWithHttpInfo(childAuthKey, removeCredits);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Email and/or SMS credits from a specific child account 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="removeCredits">Values to post to remove email or SMS credits from a specific child account</param>
        /// <returns>Task of ApiResponse (RemainingCreditModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemainingCreditModel>> RemoveCreditsAsyncWithHttpInfo (string childAuthKey, RemoveCredits removeCredits)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->RemoveCredits");
            // verify the required parameter 'removeCredits' is set
            if (removeCredits == null)
                throw new ApiException(400, "Missing required parameter 'removeCredits' when calling ResellerApi->RemoveCredits");

            var localVarPath = "./reseller/children/{childAuthKey}/credits/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (removeCredits != null && removeCredits.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(removeCredits); // http body (model) parameter
            }
            else
            {
                localVarPostBody = removeCredits; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveCredits", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemainingCreditModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (RemainingCreditModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemainingCreditModel)));
        }

        /// <summary>
        /// Updates infos of reseller&#39;s child account status based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="updateChildAccountStatus">values to update in child account status</param>
        /// <returns></returns>
        public void UpdateChildAccountStatus (string childAuthKey, UpdateChildAccountStatus updateChildAccountStatus)
        {
             UpdateChildAccountStatusWithHttpInfo(childAuthKey, updateChildAccountStatus);
        }

        /// <summary>
        /// Updates infos of reseller&#39;s child account status based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="updateChildAccountStatus">values to update in child account status</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateChildAccountStatusWithHttpInfo (string childAuthKey, UpdateChildAccountStatus updateChildAccountStatus)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->UpdateChildAccountStatus");
            // verify the required parameter 'updateChildAccountStatus' is set
            if (updateChildAccountStatus == null)
                throw new ApiException(400, "Missing required parameter 'updateChildAccountStatus' when calling ResellerApi->UpdateChildAccountStatus");

            var localVarPath = "./reseller/children/{childAuthKey}/accountStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (updateChildAccountStatus != null && updateChildAccountStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChildAccountStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChildAccountStatus; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChildAccountStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates infos of reseller&#39;s child account status based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="updateChildAccountStatus">values to update in child account status</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateChildAccountStatusAsync (string childAuthKey, UpdateChildAccountStatus updateChildAccountStatus)
        {
             await UpdateChildAccountStatusAsyncWithHttpInfo(childAuthKey, updateChildAccountStatus);

        }

        /// <summary>
        /// Updates infos of reseller&#39;s child account status based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="updateChildAccountStatus">values to update in child account status</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateChildAccountStatusAsyncWithHttpInfo (string childAuthKey, UpdateChildAccountStatus updateChildAccountStatus)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->UpdateChildAccountStatus");
            // verify the required parameter 'updateChildAccountStatus' is set
            if (updateChildAccountStatus == null)
                throw new ApiException(400, "Missing required parameter 'updateChildAccountStatus' when calling ResellerApi->UpdateChildAccountStatus");

            var localVarPath = "./reseller/children/{childAuthKey}/accountStatus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (updateChildAccountStatus != null && updateChildAccountStatus.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChildAccountStatus); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChildAccountStatus; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChildAccountStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the sender domain of reseller&#39;s child based on the childAuthKey and domainName passed 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be updated</param>
        /// <param name="updateChildDomain">value to update for sender domain</param>
        /// <returns></returns>
        public void UpdateChildDomain (string childAuthKey, string domainName, UpdateChildDomain updateChildDomain)
        {
             UpdateChildDomainWithHttpInfo(childAuthKey, domainName, updateChildDomain);
        }

        /// <summary>
        /// Updates the sender domain of reseller&#39;s child based on the childAuthKey and domainName passed 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be updated</param>
        /// <param name="updateChildDomain">value to update for sender domain</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateChildDomainWithHttpInfo (string childAuthKey, string domainName, UpdateChildDomain updateChildDomain)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->UpdateChildDomain");
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400, "Missing required parameter 'domainName' when calling ResellerApi->UpdateChildDomain");
            // verify the required parameter 'updateChildDomain' is set
            if (updateChildDomain == null)
                throw new ApiException(400, "Missing required parameter 'updateChildDomain' when calling ResellerApi->UpdateChildDomain");

            var localVarPath = "./reseller/children/{childAuthKey}/domains/{domainName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (domainName != null) localVarPathParams.Add("domainName", this.Configuration.ApiClient.ParameterToString(domainName)); // path parameter
            if (updateChildDomain != null && updateChildDomain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChildDomain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChildDomain; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChildDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates the sender domain of reseller&#39;s child based on the childAuthKey and domainName passed 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be updated</param>
        /// <param name="updateChildDomain">value to update for sender domain</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateChildDomainAsync (string childAuthKey, string domainName, UpdateChildDomain updateChildDomain)
        {
             await UpdateChildDomainAsyncWithHttpInfo(childAuthKey, domainName, updateChildDomain);

        }

        /// <summary>
        /// Updates the sender domain of reseller&#39;s child based on the childAuthKey and domainName passed 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="domainName">Pass the existing domain that needs to be updated</param>
        /// <param name="updateChildDomain">value to update for sender domain</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateChildDomainAsyncWithHttpInfo (string childAuthKey, string domainName, UpdateChildDomain updateChildDomain)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->UpdateChildDomain");
            // verify the required parameter 'domainName' is set
            if (domainName == null)
                throw new ApiException(400, "Missing required parameter 'domainName' when calling ResellerApi->UpdateChildDomain");
            // verify the required parameter 'updateChildDomain' is set
            if (updateChildDomain == null)
                throw new ApiException(400, "Missing required parameter 'updateChildDomain' when calling ResellerApi->UpdateChildDomain");

            var localVarPath = "./reseller/children/{childAuthKey}/domains/{domainName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (domainName != null) localVarPathParams.Add("domainName", this.Configuration.ApiClient.ParameterToString(domainName)); // path parameter
            if (updateChildDomain != null && updateChildDomain.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateChildDomain); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateChildDomain; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateChildDomain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates infos of reseller&#39;s child based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="resellerChild">values to update in child profile</param>
        /// <returns></returns>
        public void UpdateResellerChild (string childAuthKey, UpdateChild resellerChild)
        {
             UpdateResellerChildWithHttpInfo(childAuthKey, resellerChild);
        }

        /// <summary>
        /// Updates infos of reseller&#39;s child based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="resellerChild">values to update in child profile</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateResellerChildWithHttpInfo (string childAuthKey, UpdateChild resellerChild)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->UpdateResellerChild");
            // verify the required parameter 'resellerChild' is set
            if (resellerChild == null)
                throw new ApiException(400, "Missing required parameter 'resellerChild' when calling ResellerApi->UpdateResellerChild");

            var localVarPath = "./reseller/children/{childAuthKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (resellerChild != null && resellerChild.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resellerChild); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resellerChild; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResellerChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Updates infos of reseller&#39;s child based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="resellerChild">values to update in child profile</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateResellerChildAsync (string childAuthKey, UpdateChild resellerChild)
        {
             await UpdateResellerChildAsyncWithHttpInfo(childAuthKey, resellerChild);

        }

        /// <summary>
        /// Updates infos of reseller&#39;s child based on the childAuthKey supplied 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childAuthKey">auth key of reseller&#39;s child</param>
        /// <param name="resellerChild">values to update in child profile</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateResellerChildAsyncWithHttpInfo (string childAuthKey, UpdateChild resellerChild)
        {
            // verify the required parameter 'childAuthKey' is set
            if (childAuthKey == null)
                throw new ApiException(400, "Missing required parameter 'childAuthKey' when calling ResellerApi->UpdateResellerChild");
            // verify the required parameter 'resellerChild' is set
            if (resellerChild == null)
                throw new ApiException(400, "Missing required parameter 'resellerChild' when calling ResellerApi->UpdateResellerChild");

            var localVarPath = "./reseller/children/{childAuthKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childAuthKey != null) localVarPathParams.Add("childAuthKey", this.Configuration.ApiClient.ParameterToString(childAuthKey)); // path parameter
            if (resellerChild != null && resellerChild.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(resellerChild); // http body (model) parameter
            }
            else
            {
                localVarPostBody = resellerChild; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResellerChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
