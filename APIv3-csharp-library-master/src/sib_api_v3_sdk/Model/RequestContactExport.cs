/* 
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = sib_api_v3_sdk.Client.SwaggerDateConverter;

namespace sib_api_v3_sdk.Model
{
    /// <summary>
    /// RequestContactExport
    /// </summary>
    [DataContract]
    public partial class RequestContactExport :  IEquatable<RequestContactExport>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestContactExport" /> class.
        /// </summary>
        /// <param name="exportAttributes">List of all the attributes that you want to export. These attributes must be present in your contact database. For example, [&#39;fname&#39;, &#39;lname&#39;, &#39;email&#39;]..</param>
        /// <param name="contactFilter">This attribute has been deprecated and will be removed by January 1st, 2021. Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported. For example, {&#39;blacklisted&#39;:true} will export all the blacklisted contacts. .</param>
        /// <param name="customContactFilter">customContactFilter.</param>
        /// <param name="notifyUrl">Webhook that will be called once the export process is finished.</param>
        public RequestContactExport(List<string> exportAttributes = default(List<string>), Object contactFilter = default(Object), RequestContactExportCustomContactFilter customContactFilter = default(RequestContactExportCustomContactFilter), string notifyUrl = default(string))
        {
            this.ExportAttributes = exportAttributes;
            this.ContactFilter = contactFilter;
            this.CustomContactFilter = customContactFilter;
            this.NotifyUrl = notifyUrl;
        }
        
        /// <summary>
        /// List of all the attributes that you want to export. These attributes must be present in your contact database. For example, [&#39;fname&#39;, &#39;lname&#39;, &#39;email&#39;].
        /// </summary>
        /// <value>List of all the attributes that you want to export. These attributes must be present in your contact database. For example, [&#39;fname&#39;, &#39;lname&#39;, &#39;email&#39;].</value>
        [DataMember(Name="exportAttributes", EmitDefaultValue=false)]
        public List<string> ExportAttributes { get; set; }

        /// <summary>
        /// This attribute has been deprecated and will be removed by January 1st, 2021. Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported. For example, {&#39;blacklisted&#39;:true} will export all the blacklisted contacts. 
        /// </summary>
        /// <value>This attribute has been deprecated and will be removed by January 1st, 2021. Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported. For example, {&#39;blacklisted&#39;:true} will export all the blacklisted contacts. </value>
        [DataMember(Name="contactFilter", EmitDefaultValue=false)]
        public Object ContactFilter { get; set; }

        /// <summary>
        /// Gets or Sets CustomContactFilter
        /// </summary>
        [DataMember(Name="customContactFilter", EmitDefaultValue=false)]
        public RequestContactExportCustomContactFilter CustomContactFilter { get; set; }

        /// <summary>
        /// Webhook that will be called once the export process is finished
        /// </summary>
        /// <value>Webhook that will be called once the export process is finished</value>
        [DataMember(Name="notifyUrl", EmitDefaultValue=false)]
        public string NotifyUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestContactExport {\n");
            sb.Append("  ExportAttributes: ").Append(ExportAttributes).Append("\n");
            sb.Append("  ContactFilter: ").Append(ContactFilter).Append("\n");
            sb.Append("  CustomContactFilter: ").Append(CustomContactFilter).Append("\n");
            sb.Append("  NotifyUrl: ").Append(NotifyUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestContactExport);
        }

        /// <summary>
        /// Returns true if RequestContactExport instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestContactExport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestContactExport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExportAttributes == input.ExportAttributes ||
                    this.ExportAttributes != null &&
                    this.ExportAttributes.SequenceEqual(input.ExportAttributes)
                ) && 
                (
                    this.ContactFilter == input.ContactFilter ||
                    (this.ContactFilter != null &&
                    this.ContactFilter.Equals(input.ContactFilter))
                ) && 
                (
                    this.CustomContactFilter == input.CustomContactFilter ||
                    (this.CustomContactFilter != null &&
                    this.CustomContactFilter.Equals(input.CustomContactFilter))
                ) && 
                (
                    this.NotifyUrl == input.NotifyUrl ||
                    (this.NotifyUrl != null &&
                    this.NotifyUrl.Equals(input.NotifyUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExportAttributes != null)
                    hashCode = hashCode * 59 + this.ExportAttributes.GetHashCode();
                if (this.ContactFilter != null)
                    hashCode = hashCode * 59 + this.ContactFilter.GetHashCode();
                if (this.CustomContactFilter != null)
                    hashCode = hashCode * 59 + this.CustomContactFilter.GetHashCode();
                if (this.NotifyUrl != null)
                    hashCode = hashCode * 59 + this.NotifyUrl.GetHashCode();
                return hashCode;
            }
        }
    }

}
