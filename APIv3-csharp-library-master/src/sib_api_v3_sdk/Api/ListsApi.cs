/* 
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :- -- -- -- -- -- --: | - -- -- -- -- -- -- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using sib_api_v3_sdk.Client;
using sib_api_v3_sdk.Model;

namespace sib_api_v3_sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add existing contacts to a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <returns>PostContactInfo</returns>
        PostContactInfo AddContactToList (long? listId, AddContactToList contactEmails);

        /// <summary>
        /// Add existing contacts to a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <returns>ApiResponse of PostContactInfo</returns>
        ApiResponse<PostContactInfo> AddContactToListWithHttpInfo (long? listId, AddContactToList contactEmails);
        /// <summary>
        /// Create a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <returns>CreateModel</returns>
        CreateModel CreateList (CreateList createList);

        /// <summary>
        /// Create a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <returns>ApiResponse of CreateModel</returns>
        ApiResponse<CreateModel> CreateListWithHttpInfo (CreateList createList);
        /// <summary>
        /// Delete a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns></returns>
        void DeleteList (long? listId);

        /// <summary>
        /// Delete a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListWithHttpInfo (long? listId);
        /// <summary>
        /// Get the contacts in a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>GetContacts</returns>
        GetContacts GetContactsFromList (long? listId, DateTime? modifiedSince = null, long? limit = null, long? offset = null);

        /// <summary>
        /// Get the contacts in a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>ApiResponse of GetContacts</returns>
        ApiResponse<GetContacts> GetContactsFromListWithHttpInfo (long? listId, DateTime? modifiedSince = null, long? limit = null, long? offset = null);
        /// <summary>
        /// Get the lists in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>GetFolderLists</returns>
        GetFolderLists GetFolderLists (long? folderId, long? limit = null, long? offset = null);

        /// <summary>
        /// Get the lists in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>ApiResponse of GetFolderLists</returns>
        ApiResponse<GetFolderLists> GetFolderListsWithHttpInfo (long? folderId, long? limit = null, long? offset = null);
        /// <summary>
        /// Get the details of a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>GetExtendedList</returns>
        GetExtendedList GetList (long? listId);

        /// <summary>
        /// Get the details of a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>ApiResponse of GetExtendedList</returns>
        ApiResponse<GetExtendedList> GetListWithHttpInfo (long? listId);
        /// <summary>
        /// Get all the lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>GetLists</returns>
        GetLists GetLists (long? limit = null, long? offset = null);

        /// <summary>
        /// Get all the lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>ApiResponse of GetLists</returns>
        ApiResponse<GetLists> GetListsWithHttpInfo (long? limit = null, long? offset = null);
        /// <summary>
        /// Remove existing contacts from a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <returns>PostContactInfo</returns>
        PostContactInfo RemoveContactFromList (long? listId, RemoveContactFromList contactEmails);

        /// <summary>
        /// Remove existing contacts from a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <returns>ApiResponse of PostContactInfo</returns>
        ApiResponse<PostContactInfo> RemoveContactFromListWithHttpInfo (long? listId, RemoveContactFromList contactEmails);
        /// <summary>
        /// Update a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <returns></returns>
        void UpdateList (long? listId, UpdateList updateList);

        /// <summary>
        /// Update a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateListWithHttpInfo (long? listId, UpdateList updateList);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add existing contacts to a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <returns>Task of PostContactInfo</returns>
        System.Threading.Tasks.Task<PostContactInfo> AddContactToListAsync (long? listId, AddContactToList contactEmails);

        /// <summary>
        /// Add existing contacts to a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <returns>Task of ApiResponse (PostContactInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostContactInfo>> AddContactToListAsyncWithHttpInfo (long? listId, AddContactToList contactEmails);
        /// <summary>
        /// Create a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <returns>Task of CreateModel</returns>
        System.Threading.Tasks.Task<CreateModel> CreateListAsync (CreateList createList);

        /// <summary>
        /// Create a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <returns>Task of ApiResponse (CreateModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateModel>> CreateListAsyncWithHttpInfo (CreateList createList);
        /// <summary>
        /// Delete a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListAsync (long? listId);

        /// <summary>
        /// Delete a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAsyncWithHttpInfo (long? listId);
        /// <summary>
        /// Get the contacts in a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>Task of GetContacts</returns>
        System.Threading.Tasks.Task<GetContacts> GetContactsFromListAsync (long? listId, DateTime? modifiedSince = null, long? limit = null, long? offset = null);

        /// <summary>
        /// Get the contacts in a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetContacts)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContacts>> GetContactsFromListAsyncWithHttpInfo (long? listId, DateTime? modifiedSince = null, long? limit = null, long? offset = null);
        /// <summary>
        /// Get the lists in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>Task of GetFolderLists</returns>
        System.Threading.Tasks.Task<GetFolderLists> GetFolderListsAsync (long? folderId, long? limit = null, long? offset = null);

        /// <summary>
        /// Get the lists in a folder
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetFolderLists)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFolderLists>> GetFolderListsAsyncWithHttpInfo (long? folderId, long? limit = null, long? offset = null);
        /// <summary>
        /// Get the details of a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>Task of GetExtendedList</returns>
        System.Threading.Tasks.Task<GetExtendedList> GetListAsync (long? listId);

        /// <summary>
        /// Get the details of a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>Task of ApiResponse (GetExtendedList)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetExtendedList>> GetListAsyncWithHttpInfo (long? listId);
        /// <summary>
        /// Get all the lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>Task of GetLists</returns>
        System.Threading.Tasks.Task<GetLists> GetListsAsync (long? limit = null, long? offset = null);

        /// <summary>
        /// Get all the lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetLists)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetLists>> GetListsAsyncWithHttpInfo (long? limit = null, long? offset = null);
        /// <summary>
        /// Remove existing contacts from a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <returns>Task of PostContactInfo</returns>
        System.Threading.Tasks.Task<PostContactInfo> RemoveContactFromListAsync (long? listId, RemoveContactFromList contactEmails);

        /// <summary>
        /// Remove existing contacts from a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <returns>Task of ApiResponse (PostContactInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostContactInfo>> RemoveContactFromListAsyncWithHttpInfo (long? listId, RemoveContactFromList contactEmails);
        /// <summary>
        /// Update a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateListAsync (long? listId, UpdateList updateList);

        /// <summary>
        /// Update a list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateListAsyncWithHttpInfo (long? listId, UpdateList updateList);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ListsApi : IListsApi
    {
        private sib_api_v3_sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ListsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListsApi(String basePath)
        {
            this.Configuration = new sib_api_v3_sdk.Client.Configuration { BasePath = basePath };

            ExceptionFactory = sib_api_v3_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ListsApi(sib_api_v3_sdk.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = sib_api_v3_sdk.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = sib_api_v3_sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public sib_api_v3_sdk.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public sib_api_v3_sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add existing contacts to a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <returns>PostContactInfo</returns>
        public PostContactInfo AddContactToList (long? listId, AddContactToList contactEmails)
        {
             ApiResponse<PostContactInfo> localVarResponse = AddContactToListWithHttpInfo(listId, contactEmails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add existing contacts to a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <returns>ApiResponse of PostContactInfo</returns>
        public ApiResponse< PostContactInfo > AddContactToListWithHttpInfo (long? listId, AddContactToList contactEmails)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->AddContactToList");
            // verify the required parameter 'contactEmails' is set
            if (contactEmails == null)
                throw new ApiException(400, "Missing required parameter 'contactEmails' when calling ListsApi->AddContactToList");

            var localVarPath = "./contacts/lists/{listId}/contacts/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactEmails != null && contactEmails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactEmails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactEmails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContactToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContactInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PostContactInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContactInfo)));
        }

        /// <summary>
        /// Add existing contacts to a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <returns>Task of PostContactInfo</returns>
        public async System.Threading.Tasks.Task<PostContactInfo> AddContactToListAsync (long? listId, AddContactToList contactEmails)
        {
             ApiResponse<PostContactInfo> localVarResponse = await AddContactToListAsyncWithHttpInfo(listId, contactEmails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add existing contacts to a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails addresses of the contacts</param>
        /// <returns>Task of ApiResponse (PostContactInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostContactInfo>> AddContactToListAsyncWithHttpInfo (long? listId, AddContactToList contactEmails)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->AddContactToList");
            // verify the required parameter 'contactEmails' is set
            if (contactEmails == null)
                throw new ApiException(400, "Missing required parameter 'contactEmails' when calling ListsApi->AddContactToList");

            var localVarPath = "./contacts/lists/{listId}/contacts/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactEmails != null && contactEmails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactEmails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactEmails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddContactToList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContactInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PostContactInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContactInfo)));
        }

        /// <summary>
        /// Create a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <returns>CreateModel</returns>
        public CreateModel CreateList (CreateList createList)
        {
             ApiResponse<CreateModel> localVarResponse = CreateListWithHttpInfo(createList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <returns>ApiResponse of CreateModel</returns>
        public ApiResponse< CreateModel > CreateListWithHttpInfo (CreateList createList)
        {
            // verify the required parameter 'createList' is set
            if (createList == null)
                throw new ApiException(400, "Missing required parameter 'createList' when calling ListsApi->CreateList");

            var localVarPath = "./contacts/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createList != null && createList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createList; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateModel)));
        }

        /// <summary>
        /// Create a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <returns>Task of CreateModel</returns>
        public async System.Threading.Tasks.Task<CreateModel> CreateListAsync (CreateList createList)
        {
             ApiResponse<CreateModel> localVarResponse = await CreateListAsyncWithHttpInfo(createList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createList">Values to create a list</param>
        /// <returns>Task of ApiResponse (CreateModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateModel>> CreateListAsyncWithHttpInfo (CreateList createList)
        {
            // verify the required parameter 'createList' is set
            if (createList == null)
                throw new ApiException(400, "Missing required parameter 'createList' when calling ListsApi->CreateList");

            var localVarPath = "./contacts/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createList != null && createList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createList; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (CreateModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateModel)));
        }

        /// <summary>
        /// Delete a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns></returns>
        public void DeleteList (long? listId)
        {
             DeleteListWithHttpInfo(listId);
        }

        /// <summary>
        /// Delete a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteListWithHttpInfo (long? listId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->DeleteList");

            var localVarPath = "./contacts/lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListAsync (long? listId)
        {
             await DeleteListAsyncWithHttpInfo(listId);

        }

        /// <summary>
        /// Delete a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListAsyncWithHttpInfo (long? listId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->DeleteList");

            var localVarPath = "./contacts/lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get the contacts in a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>GetContacts</returns>
        public GetContacts GetContactsFromList (long? listId, DateTime? modifiedSince = null, long? limit = null, long? offset = null)
        {
             ApiResponse<GetContacts> localVarResponse = GetContactsFromListWithHttpInfo(listId, modifiedSince, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the contacts in a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>ApiResponse of GetContacts</returns>
        public ApiResponse< GetContacts > GetContactsFromListWithHttpInfo (long? listId, DateTime? modifiedSince = null, long? limit = null, long? offset = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->GetContactsFromList");

            var localVarPath = "./contacts/lists/{listId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (modifiedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedSince", modifiedSince)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetContacts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContacts)));
        }

        /// <summary>
        /// Get the contacts in a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>Task of GetContacts</returns>
        public async System.Threading.Tasks.Task<GetContacts> GetContactsFromListAsync (long? listId, DateTime? modifiedSince = null, long? limit = null, long? offset = null)
        {
             ApiResponse<GetContacts> localVarResponse = await GetContactsFromListAsyncWithHttpInfo(listId, modifiedSince, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the contacts in a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="modifiedSince">Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)</param>
        /// <param name="limit">Number of documents per page (optional, default to 50)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetContacts)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetContacts>> GetContactsFromListAsyncWithHttpInfo (long? listId, DateTime? modifiedSince = null, long? limit = null, long? offset = null)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->GetContactsFromList");

            var localVarPath = "./contacts/lists/{listId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (modifiedSince != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modifiedSince", modifiedSince)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetContactsFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetContacts>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetContacts) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetContacts)));
        }

        /// <summary>
        /// Get the lists in a folder 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>GetFolderLists</returns>
        public GetFolderLists GetFolderLists (long? folderId, long? limit = null, long? offset = null)
        {
             ApiResponse<GetFolderLists> localVarResponse = GetFolderListsWithHttpInfo(folderId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the lists in a folder 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>ApiResponse of GetFolderLists</returns>
        public ApiResponse< GetFolderLists > GetFolderListsWithHttpInfo (long? folderId, long? limit = null, long? offset = null)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling ListsApi->GetFolderLists");

            var localVarPath = "./contacts/folders/{folderId}/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolderLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFolderLists>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetFolderLists) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFolderLists)));
        }

        /// <summary>
        /// Get the lists in a folder 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>Task of GetFolderLists</returns>
        public async System.Threading.Tasks.Task<GetFolderLists> GetFolderListsAsync (long? folderId, long? limit = null, long? offset = null)
        {
             ApiResponse<GetFolderLists> localVarResponse = await GetFolderListsAsyncWithHttpInfo(folderId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the lists in a folder 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">Id of the folder</param>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetFolderLists)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFolderLists>> GetFolderListsAsyncWithHttpInfo (long? folderId, long? limit = null, long? offset = null)
        {
            // verify the required parameter 'folderId' is set
            if (folderId == null)
                throw new ApiException(400, "Missing required parameter 'folderId' when calling ListsApi->GetFolderLists");

            var localVarPath = "./contacts/folders/{folderId}/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (folderId != null) localVarPathParams.Add("folderId", this.Configuration.ApiClient.ParameterToString(folderId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFolderLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetFolderLists>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetFolderLists) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetFolderLists)));
        }

        /// <summary>
        /// Get the details of a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>GetExtendedList</returns>
        public GetExtendedList GetList (long? listId)
        {
             ApiResponse<GetExtendedList> localVarResponse = GetListWithHttpInfo(listId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the details of a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>ApiResponse of GetExtendedList</returns>
        public ApiResponse< GetExtendedList > GetListWithHttpInfo (long? listId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->GetList");

            var localVarPath = "./contacts/lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtendedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetExtendedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtendedList)));
        }

        /// <summary>
        /// Get the details of a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>Task of GetExtendedList</returns>
        public async System.Threading.Tasks.Task<GetExtendedList> GetListAsync (long? listId)
        {
             ApiResponse<GetExtendedList> localVarResponse = await GetListAsyncWithHttpInfo(listId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the details of a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <returns>Task of ApiResponse (GetExtendedList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetExtendedList>> GetListAsyncWithHttpInfo (long? listId)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->GetList");

            var localVarPath = "./contacts/lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetExtendedList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetExtendedList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetExtendedList)));
        }

        /// <summary>
        /// Get all the lists 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>GetLists</returns>
        public GetLists GetLists (long? limit = null, long? offset = null)
        {
             ApiResponse<GetLists> localVarResponse = GetListsWithHttpInfo(limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the lists 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>ApiResponse of GetLists</returns>
        public ApiResponse< GetLists > GetListsWithHttpInfo (long? limit = null, long? offset = null)
        {

            var localVarPath = "./contacts/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLists>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetLists) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLists)));
        }

        /// <summary>
        /// Get all the lists 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>Task of GetLists</returns>
        public async System.Threading.Tasks.Task<GetLists> GetListsAsync (long? limit = null, long? offset = null)
        {
             ApiResponse<GetLists> localVarResponse = await GetListsAsyncWithHttpInfo(limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the lists 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Number of documents per page (optional, default to 10)</param>
        /// <param name="offset">Index of the first document of the page (optional, default to 0)</param>
        /// <returns>Task of ApiResponse (GetLists)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetLists>> GetListsAsyncWithHttpInfo (long? limit = null, long? offset = null)
        {

            var localVarPath = "./contacts/lists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetLists>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (GetLists) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetLists)));
        }

        /// <summary>
        /// Remove existing contacts from a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <returns>PostContactInfo</returns>
        public PostContactInfo RemoveContactFromList (long? listId, RemoveContactFromList contactEmails)
        {
             ApiResponse<PostContactInfo> localVarResponse = RemoveContactFromListWithHttpInfo(listId, contactEmails);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove existing contacts from a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <returns>ApiResponse of PostContactInfo</returns>
        public ApiResponse< PostContactInfo > RemoveContactFromListWithHttpInfo (long? listId, RemoveContactFromList contactEmails)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->RemoveContactFromList");
            // verify the required parameter 'contactEmails' is set
            if (contactEmails == null)
                throw new ApiException(400, "Missing required parameter 'contactEmails' when calling ListsApi->RemoveContactFromList");

            var localVarPath = "./contacts/lists/{listId}/contacts/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactEmails != null && contactEmails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactEmails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactEmails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveContactFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContactInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PostContactInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContactInfo)));
        }

        /// <summary>
        /// Remove existing contacts from a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <returns>Task of PostContactInfo</returns>
        public async System.Threading.Tasks.Task<PostContactInfo> RemoveContactFromListAsync (long? listId, RemoveContactFromList contactEmails)
        {
             ApiResponse<PostContactInfo> localVarResponse = await RemoveContactFromListAsyncWithHttpInfo(listId, contactEmails);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove existing contacts from a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="contactEmails">Emails adresses of the contact</param>
        /// <returns>Task of ApiResponse (PostContactInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PostContactInfo>> RemoveContactFromListAsyncWithHttpInfo (long? listId, RemoveContactFromList contactEmails)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->RemoveContactFromList");
            // verify the required parameter 'contactEmails' is set
            if (contactEmails == null)
                throw new ApiException(400, "Missing required parameter 'contactEmails' when calling ListsApi->RemoveContactFromList");

            var localVarPath = "./contacts/lists/{listId}/contacts/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (contactEmails != null && contactEmails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactEmails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = contactEmails; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveContactFromList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PostContactInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (PostContactInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PostContactInfo)));
        }

        /// <summary>
        /// Update a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <returns></returns>
        public void UpdateList (long? listId, UpdateList updateList)
        {
             UpdateListWithHttpInfo(listId, updateList);
        }

        /// <summary>
        /// Update a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateListWithHttpInfo (long? listId, UpdateList updateList)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->UpdateList");
            // verify the required parameter 'updateList' is set
            if (updateList == null)
                throw new ApiException(400, "Missing required parameter 'updateList' when calling ListsApi->UpdateList");

            var localVarPath = "./contacts/lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (updateList != null && updateList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateList; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateListAsync (long? listId, UpdateList updateList)
        {
             await UpdateListAsyncWithHttpInfo(listId, updateList);

        }

        /// <summary>
        /// Update a list 
        /// </summary>
        /// <exception cref="sib_api_v3_sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listId">Id of the list</param>
        /// <param name="updateList">Values to update a list</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateListAsyncWithHttpInfo (long? listId, UpdateList updateList)
        {
            // verify the required parameter 'listId' is set
            if (listId == null)
                throw new ApiException(400, "Missing required parameter 'listId' when calling ListsApi->UpdateList");
            // verify the required parameter 'updateList' is set
            if (updateList == null)
                throw new ApiException(400, "Missing required parameter 'updateList' when calling ListsApi->UpdateList");

            var localVarPath = "./contacts/lists/{listId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (listId != null) localVarPathParams.Add("listId", this.Configuration.ApiClient.ParameterToString(listId)); // path parameter
            if (updateList != null && updateList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateList; // byte array
            }

            // authentication (api-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarHeaderParams["api-key"] = this.Configuration.GetApiKeyWithPrefix("api-key");
            }
            // authentication (partner-key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("partner-key")))
            {
                localVarHeaderParams["partner-key"] = this.Configuration.GetApiKeyWithPrefix("partner-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                null);
        }

    }
}
